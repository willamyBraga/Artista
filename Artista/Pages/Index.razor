@page "/home"
@inject NavigationManager navegacao
@inject Excel excel
@inject MeArtistas artistaControler
@inject IJSRuntime js
@inject MeUsuarios user

@if (MeUsuarios.UsuarioPerfil == PerfilUsuario.Administrador || MeUsuarios.UsuarioPerfil == PerfilUsuario.Moderador)
{
    <div style="padding: 10px 10px 10px;">
        <h4>Cadastro de artista</h4>
        <button class="btn btn-primary" @onclick="@(()=> navegacao.NavigateTo("/cadastroartista"))">Incluir novo Registro</button>
        <div class="alert-danger">@erro</div>
        <input type="text" @bind="filtro" @onkeyup="Pesquisar" @onkeydown="Limpar" />
        <button @onclick="Pesquisar" class="btn btn-outline-info">Filtrar</button>
    </div>
    @if (dt == null)
    {
        <h1>Carregando...</h1>
    }
    else if (dt.Rows.Count == 0)
    {
        <h1>Não existem cadastros...</h1>
    }
    else
    {
        <div class="form-group">
            <table class="table">
                <thead>
                    <tr>
                        <th><a title="Clique para ordernar por nome" style="cursor: pointer">Nome</a><a @onclick="@(() => Ordenar(1))" class="@mudaclasse" style="margin-left:8px; cursor: pointer"></a></th>
                        <th><a title="Clique para ordenar por música" style="cursor: pointer">Musica</a><a @onclick="@(() => Ordenar(2))" class="@mudaclasse2" style="margin-left: 8px; cursor: pointer"></a></th>
                        <th>Editar</th>
                        <th>Deletar</th>
                    </tr>
                </thead>
                <tbody>
                    @foreach (DataRow a in dt.Rows)
                    {
                        <tr id="active">
                            <td><a title="Ver detalhes" style="cursor: pointer" @onclick="@(() => navegacao.NavigateTo("/detalhes/" + a["artistaId"]))">@a["NomeArtista"]</a></td>
                            <td>@a["MusicaArtista"]</td>
                            <td><a title="Editar" style="cursor: pointer" class="btn btn-primary oi oi-pencil" @onclick="@(()=> navegacao.NavigateTo("/editar/" + a["artistaId"]))"></a></td>
                            <td><a style="cursor: pointer" title="Excluir" @onclick="@(()=>Deletar(@a["artistaId"]))" class="btn btn-danger oi oi-trash"></a></td>
                        </tr>
                    }
                </tbody>
            </table>
            <div>
                <button class="btn btn-primary" type="button" @onclick="() => ExcelExport()">Exportar para o Excel</button>
            </div>
            <Confirmar @ref="@confirma" onCancela="@Cancelar" onConfirma="@DeletarConfirma">
                <div>Deseja escluir o item ?</div>
            </Confirmar>
        </div>
    }
}
else
{
    <h1>sem acesso....</h1>
}

@code{
    DataTable dt = new DataTable();
    Confirmar confirma;
    object idDeleta;
    private string filtro = string.Empty;
    string erro;
    public List<UserLogin> users;

    string mudaclasse = "fa fa-arrow-circle-up";
    string mudaclasse2 = "fa fa-arrow-circle-up";

    protected override async Task OnInitializedAsync()
    {
        dt = await artistaControler.LerDadosDataTable();
        users = new List<UserLogin>();
    }
    //deletar
    void Deletar(object artistaid)
    {
        confirma.Exibir();
        idDeleta = artistaid;
    }
    async Task DeletarConfirma()
    {
        DataRow[] row = dt.Select("artistaId =" + idDeleta);
        if (row.Length > 0)
        {
            row[0].Delete();
            await artistaControler.AdicionarDataTable(dt);
            confirma.Ocultar();
            dt = await artistaControler.LerDadosDataTable();

        }
    }
    void Cancelar()
    {
        confirma.Ocultar();
    }
    //ordernar
    private void Ordenar(int indice)
    {
        if (indice == 1)
        {
            if (mudaclasse == "fa fa-arrow-circle-up")
            {
                dt.DefaultView.Sort = "NomeArtista ASC";
                dt = dt.DefaultView.ToTable(true);
                mudaclasse = "fa fa-arrow-circle-down";
            }
            else if (mudaclasse == "fa fa-arrow-circle-down")
            {
                dt.DefaultView.Sort = "NomeArtista DESC";
                dt = dt.DefaultView.ToTable(true);
                mudaclasse = "fa fa-arrow-circle-up";
            }
        }
        else if (indice == 2)
        {
            if (mudaclasse2 == "fa fa-arrow-circle-up")
            {
                dt.DefaultView.Sort = "MusicaArtista ASC";
                dt = dt.DefaultView.ToTable(true);
                mudaclasse2 = "fa fa-arrow-circle-down";
            }
            else if (mudaclasse2 == "fa fa-arrow-circle-down")
            {
                dt.DefaultView.Sort = "MusicaArtista DESC";
                dt = dt.DefaultView.ToTable(true);
                mudaclasse2 = "fa fa-arrow-circle-up";
            }
        }

    }

    //pesquisar
    public void Pesquisar()
    {
        //verificar como retorna os dados sem informar o registro tal como esta no banco de dados

        try
        {
            //Filtro é a string que vem do input, que o usuario digita
            dt.DefaultView.RowFilter = "NomeArtista like '" + filtro + "%'";
            dt = dt.DefaultView.ToTable(true);
            erro = string.Empty;
        }
        catch (Exception ex)
        {

            erro = "erro " + ex.Message;
        }
    }

    public async Task Limpar()
    {
        filtro = string.Empty;
        dt = await artistaControler.LerDadosDataTable();
    }

    public async Task ExcelExport()
    {
        dt = await artistaControler.LerDadosDataTable();
        await excel.ExcelFile(dt);
    }

}